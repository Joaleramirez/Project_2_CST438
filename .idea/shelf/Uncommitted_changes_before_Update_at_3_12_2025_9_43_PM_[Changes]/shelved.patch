Index: Project_2/frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport WelcomePage from \"./pages/WelcomePage\";\r\nimport TierListPage from \"./pages/TierListPage\";\r\nimport CreateAccountPage from \"./pages/CreateAccountPage\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/\" element={<WelcomePage />} />\r\n            <Route path=\"/TierList\" element={<TierListPage />} />\r\n            <Route path=\"/CreateAccountPage\" element={<CreateAccountPage />} />\r\n        </Routes>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/App.js b/Project_2/frontend/src/App.js
--- a/Project_2/frontend/src/App.js	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/frontend/src/App.js	(date 1741840938923)
@@ -1,18 +1,47 @@
 import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
+import { DndProvider } from "react-dnd";
+import { HTML5Backend } from "react-dnd-html5-backend";
+
 import WelcomePage from "./pages/WelcomePage";
 import TierListPage from "./pages/TierListPage";
-import CreateAccountPage from "./pages/CreateAccountPage";
+import LoginPage from "./pages/LoginPage";
+import Dashboard from "./pages/Dashboard";
+import Onboarding from "./pages/Onboarding";
+import Explore from "./pages/Explore";
+import AccountPage from "./pages/AccountPage"
 
 function App() {
-  return (
-      <Router>
-        <Routes>
-          <Route path="/" element={<WelcomePage />} />
-            <Route path="/TierList" element={<TierListPage />} />
-            <Route path="/CreateAccountPage" element={<CreateAccountPage />} />
-        </Routes>
-      </Router>
-  );
+
+    return (
+        <DndProvider backend={HTML5Backend}>
+            <Router>
+                <Routes>
+                    <Route path="/" element={<WelcomePage />} />
+                    <Route path="/TierList" element={<TierListPage />} />
+                    <Route path="/Login" element={<LoginPage />} />
+                    <Route path="/dashboard" element={<Dashboard />} />
+                    <Route path="/onboarding" element={<Onboarding />} />
+                    <Route path="/explore" element={<Explore />} />
+                </Routes>
+            </Router>
+        </DndProvider>
+    );
 }
+
+  
+      
+        
+          
+            
+            
+            
+            
+            
+            
+        
+      
+  
+
+
 
 export default App;
Index: Project_2/frontend/src/pages/WelcomePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\r\nimport \"../styles/WelcomePage.css\"; // Import the CSS file\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst WelcomePage = () => {\r\n    const handleGoogleLogin = () => {\r\n        window.location.href = \"http://localhost:8080/oauth2/authorization/google\";\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleClick = () => {\r\n        navigate('/CreateAccountPage');\r\n    };\r\n\r\n    return (\r\n        <div className=\"welcome-container\">\r\n            <h1 className=\"welcome-title\">Welcome to MatchMyTier</h1>\r\n            <p className=\"welcome-subtitle\">\r\n                Rank, Compare, and Connect with People Who Think Like You!\r\n            </p>\r\n            <button onClick={handleGoogleLogin} className=\"welcome-button\">\r\n                Sign in With Google\r\n            </button>\r\n            <button onClick={handleClick} className=\"welcome-button\">\r\n                Create Account\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WelcomePage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/WelcomePage.jsx b/Project_2/frontend/src/pages/WelcomePage.jsx
--- a/Project_2/frontend/src/pages/WelcomePage.jsx	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/frontend/src/pages/WelcomePage.jsx	(date 1741840940085)
@@ -1,6 +1,10 @@
 import React from "react";
 import "../styles/WelcomePage.css"; // Import the CSS file
+<<<<<<< HEAD
 import { useNavigate } from 'react-router-dom';
+=======
+import {Link} from 'react-router-dom';
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
 
 const WelcomePage = () => {
     const handleGoogleLogin = () => {
@@ -14,6 +18,7 @@
     };
 
     return (
+<<<<<<< HEAD
         <div className="welcome-container">
             <h1 className="welcome-title">Welcome to MatchMyTier</h1>
             <p className="welcome-subtitle">
@@ -25,6 +30,25 @@
             <button onClick={handleClick} className="welcome-button">
                 Create Account
             </button>
+=======
+        <div className="page">
+            <div className="login-container">
+                <Link to="/Login" className="login-button">
+                    <strong>
+                        Log In
+                    </strong>
+                </Link>
+            </div>
+            <div className="welcome-container">
+                <h1 className="welcome-title">Welcome to MatchMyTier</h1>
+                <p className="welcome-subtitle">
+                    Rank, Compare, and Connect with People Who Think Like You!
+                </p>
+                <button onClick={handleGoogleLogin} className="welcome-button">
+                    Sign in With Google
+                </button>
+            </div>
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
         </div>
     );
 };
Index: Project_2/backend/src/test/java/com/example/Project_2/Project2ApplicationTests.java
===================================================================
diff --git a/Project_2/backend/src/test/java/com/example/Project_2/Project2ApplicationTests.java b/Project_2/backend/src/test/java/com/example/Project_2/Project2ApplicationTests.java
deleted file mode 100644
--- a/Project_2/backend/src/test/java/com/example/Project_2/Project2ApplicationTests.java	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ /dev/null	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
@@ -1,13 +0,0 @@
-package com.example.Project_2;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
-
-@SpringBootTest
-class Project2ApplicationTests {
-
-	@Test
-	void contextLoads() {
-	}
-
-}
Index: Project_2/frontend/src/styles/LoginPage.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/LoginPage.css b/Project_2/frontend/src/styles/LoginPage.css
new file mode 100644
--- /dev/null	(date 1741840919411)
+++ b/Project_2/frontend/src/styles/LoginPage.css	(date 1741840919411)
@@ -0,0 +1,62 @@
+body, html {
+    margin: 0;
+    padding: 0;
+    font-family: 'Arial', sans-serif;
+    height: 100%;
+}
+
+.login-page {
+    display: flex;
+    flex-direction: column;
+    justify-content: center;
+    align-items: center;
+    height: 100vh;
+    background: linear-gradient(to right, #4A90E2, #9013FE);
+    color: white;
+    text-align: center;
+}
+
+.login-form {
+    display: flex;
+    flex-direction: column;
+    justify-content: space-between;
+    align-items: center;
+    border-radius: 25px;
+    padding-left: 10vh;
+    padding-right: 10vh;
+    padding-top: 5vh;
+    padding-bottom: 10vh;
+    background-color: white;
+    color: #4A90E2;
+}
+
+.input-label {
+    padding-bottom: 5vh;
+    text-align: left;
+}
+
+.input-text {
+    border-radius: 25px;
+    height: 2em;
+    border: 1px solid #9013FE;
+    padding-left: 1em;
+}
+
+.input-submit {
+    border-radius: 25px;
+    border: 1px solid #9013FE;
+    background-color: white;
+    color: #4A90E2;
+    font-size: 1.2rem;
+    padding: .5em;
+    cursor: pointer;
+    transition: all 0.3s ease-in-out;
+}
+
+.input-submit:hover {
+    background-color: #e0e0e0;
+}
+
+.input-submit:active {
+    background-color: lightgray;
+}
\ No newline at end of file
Index: Project_2/backend/src/main/java/com/example/Project_2/repositories/TierListRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierListRepository.java b/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierListRepository.java
new file mode 100644
--- /dev/null	(date 1741840919389)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierListRepository.java	(date 1741840919389)
@@ -0,0 +1,9 @@
+package com.example.Project_2.repository;
+
+import com.example.Project_2.models.TierList;
+import org.springframework.data.jpa.repository.JpaRepository;
+import java.util.List;
+
+public interface TierListRepository extends JpaRepository<TierList, Long> {
+    List<TierList> findByUserId(Long userId);
+}
Index: Project_2/frontend/src/components/TierRow.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/components/TierRow.jsx b/Project_2/frontend/src/components/TierRow.jsx
new file mode 100644
--- /dev/null	(date 1741840919403)
+++ b/Project_2/frontend/src/components/TierRow.jsx	(date 1741840919403)
@@ -0,0 +1,35 @@
+import React from "react";
+import { useDrop } from "react-dnd";
+import TierItem from "./TierItem";
+import "../styles/TierRow.css"; // Ensure CSS exists
+
+const TierRow = ({ tier, items, setItems }) => {
+    const [{ isOver }, drop] = useDrop({
+        accept: "ITEM",
+        drop: (item) => moveItem(item, tier),
+        collect: (monitor) => ({
+            isOver: !!monitor.isOver(),
+        }),
+    });
+
+    const moveItem = (item, newTier) => {
+        setItems((prevItems) =>
+            prevItems.map((i) =>
+                i.id === item.id ? { ...i, tier: newTier } : i
+            )
+        );
+    };
+
+    return (
+        <div ref={drop} className={`tier-row tier-${tier} ${isOver ? "hovered" : ""}`}>
+            <div className="tier-label">{tier}</div>
+            <div className="tier-content">
+                {items.map((item) => (
+                    <TierItem key={item.id} item={item} />
+                ))}
+            </div>
+        </div>
+    );
+};
+
+export default TierRow;
Index: Project_2/frontend/src/components/TierList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/components/TierList.jsx b/Project_2/frontend/src/components/TierList.jsx
new file mode 100644
--- /dev/null	(date 1741840919402)
+++ b/Project_2/frontend/src/components/TierList.jsx	(date 1741840919402)
@@ -0,0 +1,20 @@
+import React from "react";
+import TierRow from "./TierRow";
+import "../styles/TierList.css"; // Ensure this file exists
+
+const TierList = ({ tiers, items, setItems }) => {
+    return (
+        <div className="tier-list">
+            {tiers.map((tier) => (
+                <TierRow
+                    key={tier}
+                    tier={tier}
+                    items={items.filter((item) => item.tier === tier)}
+                    setItems={setItems}
+                />
+            ))}
+        </div>
+    );
+};
+
+export default TierList;
Index: Project_2/frontend/src/styles/TierListPage.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: 'Arial', sans-serif;\r\n    height: 100%;\r\n}\r\n\r\n.tierlist-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20px;\r\n    background: linear-gradient(to right, #4A90E2, #9013FE);\r\n    color: white;\r\n    text-align: center;\r\n    min-height: 100vh;\r\n}\r\n\r\n.tierlist-title {\r\n    font-size: 3rem;\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.active-tier-section, .past-tiers-section {\r\n    margin-bottom: 20px;\r\n}\r\n\r\nh2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 10px;\r\n}\r\n\r\np {\r\n    font-size: 1.2rem;\r\n    margin: 5px 0;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/TierListPage.css b/Project_2/frontend/src/styles/TierListPage.css
--- a/Project_2/frontend/src/styles/TierListPage.css	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/frontend/src/styles/TierListPage.css	(date 1741840919413)
@@ -1,3 +1,4 @@
+/* General styles */
 body, html {
     margin: 0;
     padding: 0;
@@ -8,31 +9,107 @@
 .tierlist-container {
     display: flex;
     flex-direction: column;
-    justify-content: center;
     align-items: center;
     padding: 20px;
     background: linear-gradient(to right, #4A90E2, #9013FE);
     color: white;
     text-align: center;
     min-height: 100vh;
+    overflow-x: hidden;
 }
 
 .tierlist-title {
     font-size: 3rem;
     font-weight: bold;
-    margin-bottom: 10px;
-}
-
-.active-tier-section, .past-tiers-section {
     margin-bottom: 20px;
 }
 
-h2 {
-    font-size: 2rem;
-    margin-bottom: 10px;
+/* Styling for the entire tier list */
+.tier-list {
+    display: flex;
+    flex-direction: column;
+    width: 80%;
+    max-width: 900px;
+    background: rgba(255, 255, 255, 0.2);
+    padding: 10px;
+    border-radius: 15px;
+}
+
+/* Styling for each tier row */
+.tier-row {
+    display: flex;
+    align-items: center;
+    margin: 5px 0;
+    border-radius: 10px;
+    overflow: hidden;
+    transition: background 0.3s ease-in-out;
+}
+
+.tier-row.hovered {
+    background: rgba(255, 255, 255, 0.3);
+}
+
+/* Left-side tier label (S, A, B, C, etc.) */
+.tier-label {
+    width: 50px;
+    font-size: 1.5rem;
+    font-weight: bold;
+    text-align: center;
+    padding: 10px;
+    color: white;
+}
+
+/* Area where items are placed */
+.tier-content {
+    flex: 1;
+    /*min-height: 60px;*/
+    display: flex;
+    align-items: center;
+    padding: 5px;
+    background: rgba(255, 255, 255, 0.1);
+    border-left: 2px solid rgba(255, 255, 255, 0.3);
+    min-height: 70px;
 }
 
-p {
+/* Draggable tier items */
+.tier-item {
+    background: white;
+    color: black;
+    padding: 10px 20px;
+    margin: 5px;
+    border-radius: 5px;
     font-size: 1.2rem;
-    margin: 5px 0;
+    font-weight: bold;
+    cursor: grab;
+    transition: transform 0.2s ease-in-out;
+}
+
+.tier-item:hover {
+    background: #f2f2f2;
+}
+
+.tier-item.dragging {
+    opacity: 0.5;
+    transform: scale(1.05);
+}
+
+/* Responsive adjustments */
+@media (max-width: 768px) {
+    .tierlist-title {
+        font-size: 2.5rem;
+    }
+
+    .tier-list {
+        width: 90%;
+    }
+
+    .tier-label {
+        font-size: 1.3rem;
+        width: 40px;
+    }
+
+    .tier-item {
+        font-size: 1rem;
+        padding: 8px 16px;
+    }
 }
Index: Project_2/frontend/src/components/TierItem.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/components/TierItem.jsx b/Project_2/frontend/src/components/TierItem.jsx
new file mode 100644
--- /dev/null	(date 1741840919401)
+++ b/Project_2/frontend/src/components/TierItem.jsx	(date 1741840919401)
@@ -0,0 +1,21 @@
+import React from "react";
+import { useDrag } from "react-dnd";
+import "../styles/TierItem.css"; // Ensure CSS exists
+
+const TierItem = ({ item }) => {
+    const [{ isDragging }, drag] = useDrag({
+        type: "ITEM",
+        item: { id: item.id },
+        collect: (monitor) => ({
+            isDragging: !!monitor.isDragging(),
+        }),
+    });
+
+    return (
+        <div ref={drag} className={`tier-item ${isDragging ? "dragging" : ""}`}>
+            {item.name}
+        </div>
+    );
+};
+
+export default TierItem;
Index: Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java b/Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1741840919390)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java	(date 1741840919390)
@@ -0,0 +1,52 @@
+package com.example.Project_2.security;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.util.List;
+
+@Configuration
+public class SecurityConfig {
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
+        http
+                .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Enable CORS
+                .authorizeHttpRequests(auth -> auth
+                        .requestMatchers("/", "/welcome", "/user").permitAll() // Public endpoints
+                        .requestMatchers("/admin/**").hasAuthority("ADMIN") // Only admins can access admin routes
+                        .anyRequest().authenticated() // Protect other routes
+                )
+                .logout(logout -> logout
+                        .logoutRequestMatcher(new AntPathRequestMatcher("/logout")) // Match logout URL
+                        .logoutSuccessUrl("http://localhost:3000/") // Redirect to frontend Welcome Page
+                        .invalidateHttpSession(true) // Clear session
+                        .clearAuthentication(true) // Remove authentication details
+                        .deleteCookies("JSESSIONID") // Ensure logout deletes session cookies
+                )
+                .oauth2Login(oauth2 -> oauth2
+                        .defaultSuccessUrl("http://localhost:3000/dashboard", true) // Redirect to dashboard after login
+                );
+
+        return http.build();
+    }
+
+
+    @Bean
+    public CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        configuration.setAllowedOrigins(List.of("http://localhost:3000")); // Allow frontend
+        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
+        configuration.setAllowedHeaders(List.of("Authorization", "Content-Type"));
+        configuration.setAllowCredentials(true);
+
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+        return source;
+    }
+}
Index: Project_2/frontend/src/pages/Onboarding.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/Onboarding.jsx b/Project_2/frontend/src/pages/Onboarding.jsx
new file mode 100644
--- /dev/null	(date 1741840919408)
+++ b/Project_2/frontend/src/pages/Onboarding.jsx	(date 1741840919408)
@@ -0,0 +1,41 @@
+import React, { useState } from "react";
+import "../styles/Onboarding.css";
+
+const categories = ["Gaming", "Movies", "Music", "Sports", "Anime"];
+
+const Onboarding = () => {
+    const [selectedCategories, setSelectedCategories] = useState([]);
+
+    const handleCategoryClick = (category) => {
+        setSelectedCategories((prev) =>
+            prev.includes(category) ? prev.filter((c) => c !== category) : [...prev, category]
+        );
+    };
+
+    const handleSubmit = () => {
+        console.log("Selected Categories:", selectedCategories);
+        window.location.href = "/explore"; // Mock navigation to Explore Page
+    };
+
+    return (
+        <div className="onboarding-container">
+            <h1>Select Your Interests</h1>
+            <div className="categories">
+                {categories.map((category) => (
+                    <button
+                        key={category}
+                        className={`category-btn ${selectedCategories.includes(category) ? "selected" : ""}`}
+                        onClick={() => handleCategoryClick(category)}
+                    >
+                        {category}
+                    </button>
+                ))}
+            </div>
+            <button className="submit-btn" onClick={handleSubmit}>
+                Continue
+            </button>
+        </div>
+    );
+};
+
+export default Onboarding;
Index: Project_2/backend/src/main/java/com/example/Project_2/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/service/UserService.java b/Project_2/backend/src/main/java/com/example/Project_2/service/UserService.java
new file mode 100644
--- /dev/null	(date 1741840919392)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/service/UserService.java	(date 1741840919392)
@@ -0,0 +1,23 @@
+package com.example.Project_2.service;
+
+import com.example.Project_2.models.User;
+import com.example.Project_2.repository.UserRepository;
+import org.springframework.stereotype.Service;
+import java.util.List;
+
+@Service
+public class UserService {
+    private final UserRepository userRepository;
+
+    public UserService(UserRepository userRepository) {
+        this.userRepository = userRepository;
+    }
+
+    public List<User> getAllUsers() {
+        return userRepository.findAll();
+    }
+
+    public User saveUser(User user) {
+        return userRepository.save(user);
+    }
+}
Index: Project_2/frontend/src/styles/Onboarding.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/Onboarding.css b/Project_2/frontend/src/styles/Onboarding.css
new file mode 100644
--- /dev/null	(date 1741840919412)
+++ b/Project_2/frontend/src/styles/Onboarding.css	(date 1741840919412)
@@ -0,0 +1,45 @@
+.onboarding-container {
+    text-align: center;
+    padding: 50px;
+    background: linear-gradient(to right, #4A90E2, #9013FE);
+    color: white;
+    height: 100vh;
+}
+
+.categories {
+    display: flex;
+    justify-content: center;
+    gap: 15px;
+    margin-top: 20px;
+}
+
+.category-btn {
+    background-color: white;
+    color: #4A90E2;
+    border: none;
+    padding: 12px 24px;
+    font-size: 1rem;
+    border-radius: 25px;
+    cursor: pointer;
+    transition: all 0.3s ease-in-out;
+}
+
+.category-btn.selected {
+    background-color: #9013FE;
+    color: white;
+}
+
+.submit-btn {
+    margin-top: 30px;
+    background-color: white;
+    color: #4A90E2;
+    padding: 12px 24px;
+    border: none;
+    font-size: 1.2rem;
+    border-radius: 25px;
+    cursor: pointer;
+}
+
+.submit-btn:hover {
+    background-color: #e0e0e0;
+}
Index: Project_2/frontend/src/pages/LoginPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/LoginPage.jsx b/Project_2/frontend/src/pages/LoginPage.jsx
new file mode 100644
--- /dev/null	(date 1741840919407)
+++ b/Project_2/frontend/src/pages/LoginPage.jsx	(date 1741840919407)
@@ -0,0 +1,24 @@
+import React from "react";
+import "../styles/LoginPage.css"; // Import the CSS file
+
+const LoginPage = () => {
+    return (
+        <div className="login-page">
+            <h1>Login Page</h1>
+            <form method="" action="/" className="login-form"> {/*make method POST. action will go to home*/}
+                <label className="input-label">
+                    <h3>Username</h3>
+                    <input type="text" name="username" className="input-text"/> <br/>
+                </label>
+                <label className="input-label">
+                    <h3>Password</h3>
+                    <input type="password" name="password" className="input-text"/> <br/>
+                </label>
+
+                <input type="submit" value="Submit" className="input-submit"/>
+            </form>
+        </div>
+    );
+};
+
+export default LoginPage;
Index: Project_2/backend/src/main/java/com/example/Project_2/repositories/TierItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierItemRepository.java b/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierItemRepository.java
new file mode 100644
--- /dev/null	(date 1741840919388)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/repositories/TierItemRepository.java	(date 1741840919388)
@@ -0,0 +1,9 @@
+package com.example.Project_2.repository;
+
+import com.example.Project_2.models.TierItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+import java.util.List;
+
+public interface TierItemRepository extends JpaRepository<TierItem, Long> {
+    List<TierItem> findByTierListId(Long tierListId);
+}
Index: Project_2/frontend/src/pages/Explore.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/Explore.jsx b/Project_2/frontend/src/pages/Explore.jsx
new file mode 100644
--- /dev/null	(date 1741840919406)
+++ b/Project_2/frontend/src/pages/Explore.jsx	(date 1741840919406)
@@ -0,0 +1,32 @@
+import React from "react";
+import "../styles/Explore.css";
+
+const mockTierLists = {
+    Gaming: ["Top 5 RPGs", "Best FPS Games", "Favorite Indie Games"],
+    Movies: ["Best Sci-Fi Films", "Top 10 Horror Movies", "Best Animated Movies"],
+    Music: ["Greatest Rock Albums", "Top Hip-Hop Tracks", "Best Classical Composers"],
+};
+
+const Explore = () => {
+    return (
+        <div className="explore-container">
+            <h1>Explore Tier Lists</h1>
+            {Object.entries(mockTierLists).map(([category, lists]) => (
+                <div key={category} className="category-section">
+                    <h2>{category}</h2>
+                    <ul>
+                        {lists.map((list) => (
+                            <li key={list}>
+                                <a href={`/tierlist/${list.replace(/\s+/g, "-").toLowerCase()}`}>
+                                    {list}
+                                </a>
+                            </li>
+                        ))}
+                    </ul>
+                </div>
+            ))}
+        </div>
+    );
+};
+
+export default Explore;
Index: Project_2/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/build.gradle b/Project_2/backend/build.gradle
rename from Project_2/build.gradle
rename to Project_2/backend/build.gradle
--- a/Project_2/build.gradle	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/backend/build.gradle	(date 1741840919376)
@@ -20,11 +20,19 @@
 }
 
 dependencies {
-	implementation 'org.springframework.boot:spring-boot-starter'
+	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+	implementation 'org.springframework.boot:spring-boot-starter-web'
+	implementation 'org.springframework.boot:spring-boot-starter-security'
+	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
+	implementation 'mysql:mysql-connector-java:8.0.33'
+	implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'
+	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
 	developmentOnly 'org.springframework.boot:spring-boot-devtools'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
-	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
 }
+
+
+
 
 generateJava {
 	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
@@ -35,3 +43,7 @@
 tasks.named('test') {
 	useJUnitPlatform()
 }
+
+tasks.named('bootRun') {
+	mainClass = 'com.example.Project_2.Project2Application'
+}
Index: Project_2/frontend/src/styles/Dashboard.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/Dashboard.css b/Project_2/frontend/src/styles/Dashboard.css
new file mode 100644
--- /dev/null	(date 1741840919411)
+++ b/Project_2/frontend/src/styles/Dashboard.css	(date 1741840919411)
@@ -0,0 +1,100 @@
+/* src/styles/Dashboard.css */
+
+body, html {
+    margin: 0;
+    padding: 0;
+    font-family: 'Arial', sans-serif;
+    height: 100%;
+}
+
+.dashboard-container {
+    display: flex;
+    flex-direction: column;
+    justify-content: center;
+    align-items: center;
+    height: 95vh;
+    background: linear-gradient(to right, #4A90E2, #9013FE);
+    color: white;
+    text-align: center;
+}
+
+.dashboard-title {
+    font-size: 3rem;
+    font-weight: bold;
+    margin-bottom: 10px;
+}
+
+.dashboard-user-info {
+    background: rgba(255, 255, 255, 0.2);
+    padding: 20px;
+    border-radius: 15px;
+    width: 300px;
+    text-align: center;
+    margin-top: 20px;
+}
+
+.dashboard-user-info img {
+    border-radius: 50%;
+    width: 100px;
+    height: 100px;
+    margin-top: 10px;
+    border: 2px solid white;
+}
+
+.dashboard-user-info p {
+    margin: 10px 0;
+    font-size: 1.2rem;
+    opacity: 0.9;
+}
+
+.dashboard-button {
+    background-color: white;
+    color: #4A90E2;
+    border: none;
+    padding: 12px 24px;
+    font-size: 1.2rem;
+    border-radius: 25px;
+    cursor: pointer;
+    transition: all 0.3s ease-in-out;
+    margin-top: 20px;
+}
+
+.dashboard-button:hover {
+    background-color: #e0e0e0;
+}
+
+.admin-button {
+    background-color: #ffcc00; /* Bright yellow for emphasis */
+    color: #4A90E2;
+    border: none;
+    padding: 12px 24px;
+    font-size: 1.2rem;
+    border-radius: 25px;
+    cursor: pointer;
+    transition: all 0.3s ease-in-out;
+    margin-top: 15px;
+    font-weight: bold;
+}
+
+.admin-button:hover {
+    background-color: #ffdb4d;
+}
+
+.account-container {
+    display: flex;
+    flex-direction: row;
+    justify-content: right;
+    align-items: center;
+    background: linear-gradient(to right, #4A90E2, #9013FE);
+    height: 5vh;
+    width: 100%;
+}
+
+.account-button {
+    background-color: transparent;
+    border: none;
+    color: white;
+    padding: 12px 12px;
+    font-size: 1em;
+    text-decoration: none;
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"56874488-7e0c-477e-aab5-10a78aba306a\" name=\"Changes\" comment=\"Added packages\">\r\n      <change afterPath=\"$PROJECT_DIR$/Project_2/frontend/src/pages/CreateAccountPage.jsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Project_2/frontend/src/styles/CreateAccountPage.css\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Project_2/frontend/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Project_2/frontend/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;alberto93927&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/Joaleramirez/Project_2_CST438.git\",\r\n    \"accountId\": \"5ddf0550-8138-4a2f-94c5-33b7c7721a0a\"\r\n  }\r\n}]]></component>\r\n  <component name=\"KubernetesApiPersistence\">{}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2tW2S4Sr6Be4y56VB3vVq9nvSkR\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"#13 on dev\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/Project_2/backend\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.20224.419\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-IU-242.20224.419\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"56874488-7e0c-477e-aab5-10a78aba306a\" name=\"Changes\" comment=\"\" />\r\n      <created>1740453506639</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1740453506639</updated>\r\n      <workItem from=\"1740453507828\" duration=\"599000\" />\r\n      <workItem from=\"1740565078011\" duration=\"6409000\" />\r\n      <workItem from=\"1741122864254\" duration=\"89000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Currently, in the process of restructuring some directories in the project to integrate a frontend.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740567344781</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740567344781</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Created React Application for the frontend.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740568323057</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740568323057</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"I have created the basic WelcomePage.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740569856809</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740569856809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Added packages\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740569894215</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740569894215</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/alberto-Oauth\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Currently, in the process of restructuring some directories in the project to integrate a frontend.\" />\r\n    <MESSAGE value=\"Created React Application for the frontend.\" />\r\n    <MESSAGE value=\"I have created the basic WelcomePage.\" />\r\n    <MESSAGE value=\"Added packages\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added packages\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/.idea/workspace.xml	(date 1741840940718)
@@ -4,23 +4,67 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
+<<<<<<< HEAD
     <list default="true" id="56874488-7e0c-477e-aab5-10a78aba306a" name="Changes" comment="Added packages">
       <change afterPath="$PROJECT_DIR$/Project_2/frontend/src/pages/CreateAccountPage.jsx" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/Project_2/frontend/src/styles/CreateAccountPage.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/App.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css" afterDir="false" />
+=======
+    <list default="true" id="56874488-7e0c-477e-aab5-10a78aba306a" name="Changes" comment="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory.">
+      <change afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/models/User.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/repositories/UserRepository.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/resources/application.properties" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/services/UserService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/gradle/wrapper/gradle-wrapper.properties" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/gradle/wrapper/gradle-wrapper.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/gradlew" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/gradlew" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/resources/application.properties" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/resources/application.yml" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/resources/application.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/test/java/com/example/Project_2/Project2ApplicationTests.java" beforeDir="false" />
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
+    </list>
+    <list default="true" id="56874488-7e0c-477e-aab5-10a78aba306a" name="Changes" comment="Changed the styling to the admin button.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/backend/src/main/java/com/example/Project_2/security/SecurityConfig.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/pages/Dashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/pages/Dashboard.jsx" afterDir="false" />
+    </list>
+    <list default="true" id="56874488-7e0c-477e-aab5-10a78aba306a" name="Changes" comment="Added packages">
+      <change afterPath="$PROJECT_DIR$/Project_2/frontend/src/pages/LoginPage.jsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_2/frontend/src/styles/LoginPage.css" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/App.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/pages/WelcomePage.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css" beforeDir="false" afterPath="$PROJECT_DIR$/Project_2/frontend/src/styles/WelcomePage.css" afterDir="false" />
     </list>
+    <list default="true" id="56874488-7e0c-477e-aab5-10a78aba306a" name="Changes" comment="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory." />
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="JSX File" />
+        <option value="CSS File" />
+      </list>
+    </option>
+  </component>
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
+        <entry key="$PROJECT_DIR$" value="dev" />
+        <entry key="$PROJECT_DIR$" value="alberto-Onboarding-Prototype" />
         <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="dev" />
+        <entry key="$PROJECT_DIR$" value="alberto-Welcome" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -29,6 +73,7 @@
   &quot;lastFilter&quot;: {
     &quot;state&quot;: &quot;OPEN&quot;,
     &quot;assignee&quot;: &quot;alberto93927&quot;
+<<<<<<< HEAD
   }
 }</component>
   <component name="GithubPullRequestsUISettings"><![CDATA[{
@@ -37,6 +82,52 @@
     "accountId": "5ddf0550-8138-4a2f-94c5-33b7c7721a0a"
   }
 }]]></component>
+=======
+  }
+}</component>
+  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+  "history": [
+    {
+      "state": "OPEN",
+      "assignee": "alberto93927",
+      "reviewState": "REQUIRED"
+    }
+  ],
+  "lastFilter": {
+    "state": "OPEN",
+    "assignee": "alberto93927",
+    "reviewState": "REQUIRED"
+  }
+}]]></component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/Joaleramirez/Project_2_CST438.git&quot;,
+    &quot;accountId&quot;: &quot;59ab613a-a8a9-4d64-9f1d-57dbc17b8c6d&quot;
+  }
+}</component>
+  },
+  &quot;recentNewPullRequestHead&quot;: {
+    &quot;server&quot;: {
+      &quot;useHttp&quot;: false,
+      &quot;host&quot;: &quot;github.com&quot;,
+      &quot;port&quot;: null,
+      &quot;suffix&quot;: null
+    },
+    &quot;owner&quot;: &quot;Joaleramirez&quot;,
+    &quot;repository&quot;: &quot;Project_2_CST438&quot;
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;alberto93927&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/Joaleramirez/Project_2_CST438.git&quot;,
+    &quot;accountId&quot;: &quot;18e9a54b-eae7-4f0e-918b-827d9d507455&quot;
+  }
+}</component>
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
   <component name="KubernetesApiPersistence">{}</component>
   <component name="KubernetesApiProvider">{
   &quot;isMigrated&quot;: true
@@ -44,40 +135,122 @@
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="CurrentFile" />
+  </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 5
 }</component>
   <component name="ProjectId" id="2tW2S4Sr6Be4y56VB3vVq9nvSkR" />
+<<<<<<< HEAD
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+=======
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="1" id="Add" />
+  <component name="ProjectLevelVcsManager">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.MongoDBConnection.executor&quot;: &quot;Run&quot;,
+    &quot;Application.QuickStart.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;DB&quot;,
+    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-21&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/joale/IdeaProjects/Project_2_CST438/Project_2/backend/src/main/java/com/example&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  },
+  &quot;keyToStringList&quot;: {
+    &quot;DatabaseDriversLRU&quot;: [
+      &quot;mongo&quot;,
+      &quot;mysql&quot;,
+      &quot;mariadb&quot;
+    ]
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "RunOnceActivity.git.unshallow": "true",
+<<<<<<< HEAD
     "git-widget-placeholder": "#13 on dev",
+=======
+    "git-widget-placeholder": "alberto-Admin",
+    "git-widget-placeholder": "alberto-Onboarding-Prototype",
+    "git-widget-placeholder": "login",
+    "ignore.virus.scanning.warn.message": "true",
+    "git-widget-placeholder": "alberto-OAuth",
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
     "kotlin-language-version-configured": "true",
+    "list.type.of.created.stylesheet": "CSS",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
     "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Project",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.31494254",
     "vue.rearranger.settings.migration": "true"
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\joale\IdeaProjects\Project_2_CST438\Project_2\backend\src\main\java\com\example" />
+      <recent name="C:\Users\joale\IdeaProjects\Project_2_CST438\Project_2\backend" />
       <recent name="$PROJECT_DIR$/Project_2/backend" />
     </key>
+  </component>
+  <component name="RunManager" selected="Application.MongoClientConnectionExample">
+    <configuration name="MongoClientConnectionExample" type="Application" factoryName="Application" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="MongoClientConnectionExample" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="MongoDBConnection" type="Application" factoryName="Application" nameIsGenerated="true">
+      <option name="ALTERNATIVE_JRE_PATH" value="$USER_HOME$/.jdks/openjdk-23.0.2" />
+      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
+      <option name="MAIN_CLASS_NAME" value="MongoDBConnection" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="QuickStart" type="Application" factoryName="Application" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="QuickStart" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
   </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
+<<<<<<< HEAD
         <option value="bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.20224.419" />
         <option value="bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-IU-242.20224.419" />
+=======
+        <option value="jdk-11.0.22-corretto-11.0.22-4caba194b151-868cef46" />
+        <option value="jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021" />
+        <option value="bundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.24978.46" />
+        <option value="bundled-js-predefined-d6986cc7102b-76f8388c3a79-JavaScript-IU-243.24978.46" />
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
       </set>
     </attachedChunks>
   </component>
@@ -90,8 +263,22 @@
       <option name="presentableId" value="Default" />
       <updated>1740453506639</updated>
       <workItem from="1740453507828" duration="599000" />
+<<<<<<< HEAD
       <workItem from="1740565078011" duration="6409000" />
       <workItem from="1741122864254" duration="89000" />
+=======
+      <workItem from="1740565078011" duration="23255000" />
+      <workItem from="1740700838732" duration="206000" />
+      <workItem from="1740709467782" duration="8101000" />
+      <workItem from="1740950020816" duration="1747000" />
+      <workItem from="1741101692868" duration="6992000" />
+      <workItem from="1741122143639" duration="8413000" />
+      <workItem from="1741153163393" duration="2597000" />
+      <workItem from="1741219670999" duration="3171000" />
+      <workItem from="1740565078011" duration="36740000" />
+      <workItem from="1741044937246" duration="18000" />
+      <workItem from="1741131400421" duration="14031000" />
+>>>>>>> b16fb27f9cf4c816f258d0fbca962013d9444a87
     </task>
     <task id="LOCAL-00001" summary="Currently, in the process of restructuring some directories in the project to integrate a frontend.">
       <option name="closed" value="true" />
@@ -125,7 +312,79 @@
       <option name="project" value="LOCAL" />
       <updated>1740569894215</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="Fixed the SignIn page styling. Initially, I wanted to add Tailwind. However, I was running into some issues. So I went with regular CSS for now. Might change in the future.">
+      <option name="closed" value="true" />
+      <created>1740571745669</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1740571745670</updated>
+    </task>
+    <task id="LOCAL-00006" summary="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory.">
+      <option name="closed" value="true" />
+      <created>1740651097970</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1740651097970</updated>
+    </task>
+    <task id="LOCAL-00007" summary="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory.">
+      <option name="closed" value="true" />
+      <created>1740651112698</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1740651112698</updated>
+    </task>
+    <task id="LOCAL-00008" summary="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory.">
+      <option name="closed" value="true" />
+      <created>1740651326196</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1740651326196</updated>
+    </task>
+    <task id="LOCAL-00009" summary="I created the skeleton for the user Onboarding.jsx&#10;At the time of this commit, we don't have a database yet. To simulate new user onboarding, I added random status codes to the users to test the functionality. Additionally, I added Explore.jsx to get an idea of how it would be like to view a list of Tier Lists, which the user can then choose from.">
+      <option name="closed" value="true" />
+      <created>1741172559604</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1741172559604</updated>
+    </task>
+    <task id="LOCAL-00010" summary="Fixed some of the logic behind the Sign Out feature.">
+      <option name="closed" value="true" />
+      <created>1741173144858</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1741173144858</updated>
+    </task>
+    <task id="LOCAL-00011" summary="Made modifications to the sign-in process to distinguish admins. If a user profile is flagged as an admin, it gives the user access to the AdminPage.jsx. This page is where the user will be able to create, update, delete users, as well as view all users.&#10;&#10;This is currently being done through hardcoding, as the database isn't integrated yet. However, the files and logic are there to make it easy to integrate.">
+      <option name="closed" value="true" />
+      <created>1741212902923</created>
+      <option name="number" value="00011" />
+      <option name="presentableId" value="LOCAL-00011" />
+      <option name="project" value="LOCAL" />
+      <updated>1741212902923</updated>
+    </task>
+    <task id="LOCAL-00012" summary="Currently, hardcoding admins and new users for testing purposes.">
+      <option name="closed" value="true" />
+      <created>1741213819283</created>
+      <option name="number" value="00012" />
+      <option name="presentableId" value="LOCAL-00012" />
+      <option name="project" value="LOCAL" />
+      <updated>1741213819283</updated>
+    </task>
+    <task id="LOCAL-00013" summary="Changed the styling to the admin button.">
+      <option name="closed" value="true" />
+      <created>1741214238839</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1741214238839</updated>
+    </task>
+    <option name="localTasksCounter" value="14" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -159,6 +418,13 @@
     <MESSAGE value="Created React Application for the frontend." />
     <MESSAGE value="I have created the basic WelcomePage." />
     <MESSAGE value="Added packages" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added packages" />
+    <MESSAGE value="Fixed the SignIn page styling. Initially, I wanted to add Tailwind. However, I was running into some issues. So I went with regular CSS for now. Might change in the future." />
+    <MESSAGE value="I restructured the project again. I threw in all the gradle files and directories into the backend directory. I added CORS setup so the frontend and the backend can interact with each other securely. I integrated OAuth to the Sign In. The way it's currently working, I'm able to pass through data to the Dashboard.jsx file. There are some issues that I'm working on with the logout, and managing a user's session. Those issues will get addressed ASAP. Lastly, I added the concurrently dev dependency to create a script that will allow us to run the backend and the frontend at the sametime, through the same terminal session. This is a better alternative during development, rather than starting the frontend in one terminal window, and the backend in another terminal window. The command to start the application is &quot;npm run start:all&quot; minus the double quotes. Make sure your working directory is the frontend directory, as the terminal commands associated with the script are meant to work from the frontend directory and not the backend directory." />
+    <MESSAGE value="I created the skeleton for the user Onboarding.jsx&#10;At the time of this commit, we don't have a database yet. To simulate new user onboarding, I added random status codes to the users to test the functionality. Additionally, I added Explore.jsx to get an idea of how it would be like to view a list of Tier Lists, which the user can then choose from." />
+    <MESSAGE value="Fixed some of the logic behind the Sign Out feature." />
+    <MESSAGE value="Made modifications to the sign-in process to distinguish admins. If a user profile is flagged as an admin, it gives the user access to the AdminPage.jsx. This page is where the user will be able to create, update, delete users, as well as view all users.&#10;&#10;This is currently being done through hardcoding, as the database isn't integrated yet. However, the files and logic are there to make it easy to integrate." />
+    <MESSAGE value="Currently, hardcoding admins and new users for testing purposes." />
+    <MESSAGE value="Changed the styling to the admin button." />
+    <option name="LAST_COMMIT_MESSAGE" value="Changed the styling to the admin button." />
   </component>
 </project>
\ No newline at end of file
Index: Project_2/frontend/src/pages/AdminPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/AdminPage.jsx b/Project_2/frontend/src/pages/AdminPage.jsx
new file mode 100644
--- /dev/null	(date 1741840919404)
+++ b/Project_2/frontend/src/pages/AdminPage.jsx	(date 1741840919404)
@@ -0,0 +1,14 @@
+useEffect(() => {
+    fetch("http://localhost:8080/admin/users", { credentials: "include" })
+        .then((response) => {
+            if (!response.ok) {
+                throw new Error("Failed to fetch users");
+            }
+            return response.json();
+        })
+        .then((data) => setUsers(data))
+        .catch((error) => {
+            console.error("Error fetching users:", error);
+            setError(error.message);
+        });
+}, []);
Index: Project_2/frontend/src/styles/TierRow.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/TierRow.css b/Project_2/frontend/src/styles/TierRow.css
new file mode 100644
--- /dev/null	(date 1741840919413)
+++ b/Project_2/frontend/src/styles/TierRow.css	(date 1741840919413)
@@ -0,0 +1,33 @@
+/* General row styling */
+.tier-row {
+    display: flex;
+    align-items: center;
+    padding: 10px;
+    margin: 5px 0;
+    border-radius: 8px;
+    background-color: white;
+    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
+}
+
+/* Style for the tier label */
+.tier-label {
+    width: 50px;
+    height: 50px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    font-size: 1.5rem;
+    font-weight: bold;
+    color: white;
+    border-radius: 5px;
+    margin-right: 10px;
+}
+
+/* Assign background colors using class names */
+.tier-S .tier-label { background: #E74C3C; } /* S - Red */
+.tier-A .tier-label { background: #F4D03F; } /* A - Yellow */
+.tier-B .tier-label { background: #F7DC6F; } /* B - Light Yellow */
+.tier-C .tier-label { background: #58D68D; } /* C - Green */
+.tier-D .tier-label { background: #5DADE2; } /* D - Light Blue */
+.tier-E .tier-label { background: #2874A6; } /* E - Blue */
+.tier-F .tier-label { background: #8E44AD; } /* F - Purple */
Index: Project_2/backend/src/main/java/com/example/Project_2/controller/TierItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/controller/TierItemController.java b/Project_2/backend/src/main/java/com/example/Project_2/controller/TierItemController.java
new file mode 100644
--- /dev/null	(date 1741840919384)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/controller/TierItemController.java	(date 1741840919384)
@@ -0,0 +1,41 @@
+package com.example.Project_2.controller;
+
+import com.example.Project_2.models.TierItem;
+import com.example.Project_2.service.TierItemService;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.Optional;
+
+@RestController
+@RequestMapping("/api/tieritems")
+public class TierItemController {
+    private final TierItemService tierItemService;
+
+    public TierItemController(TierItemService tierItemService) {
+        this.tierItemService = tierItemService;
+    }
+
+    @GetMapping("/tierlist/{tierListId}")
+    public ResponseEntity<List<TierItem>> getItemsByTierListId(@PathVariable Long tierListId) {
+        return ResponseEntity.ok(tierItemService.getItemsByTierListId(tierListId));
+    }
+
+    @GetMapping("/{id}")
+    public ResponseEntity<TierItem> getTierItemById(@PathVariable Long id) {
+        Optional<TierItem> tierItem = tierItemService.getTierItemById(id);
+        return tierItem.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
+    }
+
+    @PostMapping
+    public ResponseEntity<TierItem> createTierItem(@RequestBody TierItem tierItem) {
+        return ResponseEntity.ok(tierItemService.createTierItem(tierItem));
+    }
+
+    @DeleteMapping("/{id}")
+    public ResponseEntity<Void> deleteTierItem(@PathVariable Long id) {
+        tierItemService.deleteTierItem(id);
+        return ResponseEntity.noContent().build();
+    }
+}
Index: Project_2/backend/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/settings.gradle b/Project_2/backend/settings.gradle
new file mode 100644
--- /dev/null	(date 1741840919382)
+++ b/Project_2/backend/settings.gradle	(date 1741840919382)
@@ -0,0 +1,1 @@
+rootProject.name = 'Project_2'
Index: Project_2/frontend/src/styles/TierList.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/TierList.css b/Project_2/frontend/src/styles/TierList.css
new file mode 100644
--- /dev/null	(date 1741840919412)
+++ b/Project_2/frontend/src/styles/TierList.css	(date 1741840919412)
@@ -0,0 +1,4 @@
+.tierlist-container {
+    background-color: #f4f4f4;
+    padding: 20px;
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/models/User.java b/Project_2/backend/src/main/java/com/example/Project_2/models/User.java
new file mode 100644
--- /dev/null	(date 1741840919388)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/models/User.java	(date 1741840919388)
@@ -0,0 +1,67 @@
+package com.example.Project_2.models;
+
+import jakarta.persistence.*;
+import java.util.List;
+
+@Entity
+@Table(name = "users")
+public class User {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false, unique = true)
+    private String username;
+
+    @Column(nullable = false, unique = true)
+    private String email;
+
+    @Column(nullable = false)
+    private String password;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<TierList> tierLists;
+
+    public User() {}
+
+    public User(String username, String email, String password) {
+        this.username = username;
+        this.email = email;
+        this.password = password;
+    }
+
+    // Getters and Setters
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/controller/TierListController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/controller/TierListController.java b/Project_2/backend/src/main/java/com/example/Project_2/controller/TierListController.java
new file mode 100644
--- /dev/null	(date 1741840919384)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/controller/TierListController.java	(date 1741840919384)
@@ -0,0 +1,41 @@
+package com.example.Project_2.controller;
+
+import com.example.Project_2.models.TierList;
+import com.example.Project_2.service.TierListService;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.Optional;
+
+@RestController
+@RequestMapping("/api/tierlists")
+public class TierListController {
+    private final TierListService tierListService;
+
+    public TierListController(TierListService tierListService) {
+        this.tierListService = tierListService;
+    }
+
+    @GetMapping("/user/{userId}")
+    public ResponseEntity<List<TierList>> getTierListsByUserId(@PathVariable Long userId) {
+        return ResponseEntity.ok(tierListService.getTierListsByUserId(userId));
+    }
+
+    @GetMapping("/{id}")
+    public ResponseEntity<TierList> getTierListById(@PathVariable Long id) {
+        Optional<TierList> tierList = tierListService.getTierListById(id);
+        return tierList.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
+    }
+
+    @PostMapping
+    public ResponseEntity<TierList> createTierList(@RequestBody TierList tierList) {
+        return ResponseEntity.ok(tierListService.createTierList(tierList));
+    }
+
+    @DeleteMapping("/{id}")
+    public ResponseEntity<Void> deleteTierList(@PathVariable Long id) {
+        tierListService.deleteTierList(id);
+        return ResponseEntity.noContent().build();
+    }
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/controller/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/controller/AdminController.java b/Project_2/backend/src/main/java/com/example/Project_2/controller/AdminController.java
new file mode 100644
--- /dev/null	(date 1741840919383)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/controller/AdminController.java	(date 1741840919383)
@@ -0,0 +1,29 @@
+package com.example.Project_2.controller;
+
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.Map;
+
+@RestController
+@RequestMapping("/admin")
+public class AdminController {
+
+    // Hardcoded user list
+    private List<Map<String, Object>> users = List.of(
+            Map.of("id", 1, "name", "Alberto Admin", "email", "albergarcia@csumb.edu", "role", "ADMIN"),
+            Map.of("id", 2, "name", "Bob User", "email", "bob@example.com", "role", "USER"),
+            Map.of("id", 3, "name", "Charlie User", "email", "charlie@example.com", "role", "USER")
+    );
+
+    @GetMapping("/users")
+    public List<Map<String, Object>> getAllUsers() {
+        return users;
+    }
+
+    @DeleteMapping("/users/{id}")
+    public String deleteUser(@PathVariable int id) {
+        System.out.println("User with ID " + id + " deleted.");
+        return "User with ID " + id + " deleted (not persisted yet)";
+    }
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/service/TierItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/service/TierItemService.java b/Project_2/backend/src/main/java/com/example/Project_2/service/TierItemService.java
new file mode 100644
--- /dev/null	(date 1741840919391)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/service/TierItemService.java	(date 1741840919391)
@@ -0,0 +1,32 @@
+package com.example.Project_2.service;
+
+import com.example.Project_2.models.TierItem;
+import com.example.Project_2.repository.TierItemRepository;
+import org.springframework.stereotype.Service;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class TierItemService {
+    private final TierItemRepository tierItemRepository;
+
+    public TierItemService(TierItemRepository tierItemRepository) {
+        this.tierItemRepository = tierItemRepository;
+    }
+
+    public List<TierItem> getItemsByTierListId(Long tierListId) {
+        return tierItemRepository.findByTierListId(tierListId);
+    }
+
+    public Optional<TierItem> getTierItemById(Long id) {
+        return tierItemRepository.findById(id);
+    }
+
+    public TierItem createTierItem(TierItem tierItem) {
+        return tierItemRepository.save(tierItem);
+    }
+
+    public void deleteTierItem(Long id) {
+        tierItemRepository.deleteById(id);
+    }
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/models/TierList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/models/TierList.java b/Project_2/backend/src/main/java/com/example/Project_2/models/TierList.java
new file mode 100644
--- /dev/null	(date 1741840919386)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/models/TierList.java	(date 1741840919386)
@@ -0,0 +1,56 @@
+package com.example.Project_2.models;
+
+import jakarta.persistence.*;
+import java.util.List;
+
+@Entity
+@Table(name = "tier_lists")
+public class TierList {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false)
+    private String title;
+
+    @ManyToOne
+    @JoinColumn(name = "user_id", nullable = false)
+    private User user;
+
+    @OneToMany(mappedBy = "tierList", cascade = CascadeType.ALL, orphanRemoval = true)
+    private List<TierItem> tierItems;
+
+    public TierList() {}
+
+    public TierList(String title, User user) {
+        this.title = title;
+        this.user = user;
+    }
+
+    // Getters and Setters
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+}
Index: Project_2/frontend/src/styles/TierItem.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/TierItem.css b/Project_2/frontend/src/styles/TierItem.css
new file mode 100644
--- /dev/null	(date 1741840919412)
+++ b/Project_2/frontend/src/styles/TierItem.css	(date 1741840919412)
@@ -0,0 +1,16 @@
+.tier-item {
+    background: white;
+    padding: 10px 20px;
+    margin: 5px;
+    border-radius: 8px;
+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+    font-size: 1rem;
+    font-weight: bold;
+    cursor: grab;
+    transition: transform 0.2s ease-in-out;
+}
+
+.tier-item.dragging {
+    opacity: 0.5;
+    transform: scale(1.05);
+}
Index: Project_2/backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=Project_2\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/Project_2/backend/src/main/resources/application.properties b/Project_2/backend/src/main/resources/application.properties
--- a/Project_2/backend/src/main/resources/application.properties	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/backend/src/main/resources/application.properties	(date 1741840919393)
@@ -1,1 +1,20 @@
 spring.application.name=Project_2
+
+spring.datasource.url=jdbc:mysql://qbqjlask9w6yzt9b:snugibyvjje235ga@bbj31ma8tye2kagi.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/e9lpv86t9ylryz5l
+spring.datasource.username=qbqjlask9w6yzt9b
+spring.datasource.password=	snugibyvjje235ga
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+
+# Connection pool settings
+spring.datasource.hikari.maximum-pool-size=10
+spring.datasource.hikari.minimum-idle=2
+spring.datasource.hikari.idle-timeout=30000
+spring.datasource.hikari.max-lifetime=1800000
+# JPA settings
+spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
+spring.jpa.hibernate.ddl-auto=update
+spring.jpa.show-sql=true
+
+spring.security.oauth2.client.registration.google.client-id=84760649084-9cd7ondh0ukuj5ko901hbfirda3ouf7j.apps.googleusercontent.com
+spring.security.oauth2.client.registration.google.client-secret=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
+spring.security.oauth2.client.registration.google.scope=email,profile
Index: Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.Project_2;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class Project2Application {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(Project2Application.class, args);\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java b/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java
--- a/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/Project2Application.java	(date 1741840919383)
@@ -5,9 +5,8 @@
 
 @SpringBootApplication
 public class Project2Application {
-
 	public static void main(String[] args) {
 		SpringApplication.run(Project2Application.class, args);
+		System.out.println("Starting app");
 	}
-
 }
Index: Project_2/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/Project_2/gradle/wrapper/gradle-wrapper.properties b/Project_2/backend/gradle/wrapper/gradle-wrapper.properties
rename from Project_2/gradle/wrapper/gradle-wrapper.properties
rename to Project_2/backend/gradle/wrapper/gradle-wrapper.properties
--- a/Project_2/gradle/wrapper/gradle-wrapper.properties	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/backend/gradle/wrapper/gradle-wrapper.properties	(date 1741840919377)
@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
Index: Project_2/backend/src/main/java/com/example/Project_2/models/TierItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/models/TierItem.java b/Project_2/backend/src/main/java/com/example/Project_2/models/TierItem.java
new file mode 100644
--- /dev/null	(date 1741840919386)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/models/TierItem.java	(date 1741840919386)
@@ -0,0 +1,56 @@
+package com.example.Project_2.models;
+
+import jakarta.persistence.*;
+
+@Entity
+@Table(name = "tier_items")
+public class TierItem {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false)
+    private String tierName;
+
+    @Column(nullable = false)
+    private String itemName;
+
+    @ManyToOne
+    @JoinColumn(name = "tier_list_id", nullable = false)
+    private TierList tierList;
+
+    public TierItem() {}
+
+    public TierItem(String tierName, String itemName, TierList tierList) {
+        this.tierName = tierName;
+        this.itemName = itemName;
+        this.tierList = tierList;
+    }
+
+    // Getters and Setters
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getTierName() {
+        return tierName;
+    }
+
+    public void setTierName(String tierName) {
+        this.tierName = tierName;
+    }
+
+    public String getItemName() {
+        return itemName;
+    }
+
+    public void setItemName(String itemName) {
+        this.itemName = itemName;
+    }
+}
Index: Project_2/frontend/src/pages/Dashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/pages/Dashboard.jsx b/Project_2/frontend/src/pages/Dashboard.jsx
new file mode 100644
--- /dev/null	(date 1741840919405)
+++ b/Project_2/frontend/src/pages/Dashboard.jsx	(date 1741840919405)
@@ -0,0 +1,85 @@
+import React, { useEffect, useState } from "react";
+import { useNavigate, Link } from "react-router-dom"; // Import navigation hook
+import "../styles/Dashboard.css"; // Import CSS file
+
+const Dashboard = () => {
+    const [user, setUser] = useState(null);
+    const [error, setError] = useState(null);
+    const navigate = useNavigate();
+
+    useEffect(() => {
+        fetch("http://localhost:8080/user/auth", { credentials: "include" })
+            .then((response) => {
+                if (!response.ok) {
+                    throw new Error("Failed to fetch user details");
+                }
+                return response.json();
+            })
+            .then((data) => {
+                // Simulate role-based access (Temporary until DB is ready)
+                data.role = data.email === "albergarcia@csumb.edu" ? "ADMIN" : "USER";
+
+                if (data.isNewUser) {
+                    navigate("/onboarding"); // Redirect new users to onboarding
+                } else {
+                    setUser(data);
+                }
+            })
+            .catch((error) => {
+                console.error("Error fetching user:", error);
+                setError(error.message);
+            });
+    }, [navigate]);
+
+    const handleLogout = async () => {
+        try {
+            await fetch("http://localhost:8080/logout", { credentials: "include" });
+            setUser(null); // Clear user state
+            localStorage.clear(); // Clear any stored data (optional)
+            navigate("/"); // Redirect to Welcome Page
+        } catch (error) {
+            console.error("Logout failed:", error);
+        }
+    };
+
+
+    return (
+        <div className="page">
+            <div className="account-container">
+                <Link to="/Account" className="account-button">
+                    <strong>
+                        Account
+                    </strong>
+                </Link>
+            </div>
+            <div className="dashboard-container">
+
+                <h1 className="dashboard-title">Welcome to MatchMyTier</h1>
+
+                {error ? (
+                    <p className="error-message">Error: {error}</p>
+                ) : user ? (
+                    <div className="dashboard-user-info">
+                        <h2>Hello, {user.name}!</h2>
+                        <img src={user.picture} alt="Profile" className="user-profile-pic" />
+                        <p>Email: {user.email}</p>
+
+                        {user.role === "ADMIN" && (
+                            <button onClick={() => navigate("/admin")} className="admin-button">
+                                Admin Panel
+                            </button>
+                        )}
+
+                        <button onClick={handleLogout} className="dashboard-button">
+                            Logout
+                        </button>
+                    </div>
+                ) : (
+                    <p className="loading-message">Loading user details...</p>
+                )}
+            </div>
+        </div>
+    );
+};
+
+export default Dashboard;
Index: Project_2/frontend/src/styles/Explore.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/src/styles/Explore.css b/Project_2/frontend/src/styles/Explore.css
new file mode 100644
--- /dev/null	(date 1741840919411)
+++ b/Project_2/frontend/src/styles/Explore.css	(date 1741840919411)
@@ -0,0 +1,35 @@
+.explore-container {
+    text-align: center;
+    padding: 50px;
+    background: linear-gradient(to right, #4A90E2, #9013FE);
+    color: white;
+    height: 100vh;
+}
+
+.category-section {
+    margin-top: 30px;
+}
+
+.category-section h2 {
+    font-size: 2rem;
+}
+
+.category-section ul {
+    list-style-type: none;
+    padding: 0;
+}
+
+.category-section li {
+    margin: 10px 0;
+}
+
+.category-section a {
+    color: white;
+    text-decoration: none;
+    font-size: 1.2rem;
+    transition: all 0.3s ease-in-out;
+}
+
+.category-section a:hover {
+    text-decoration: underline;
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/repositories/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/repositories/UserRepository.java b/Project_2/backend/src/main/java/com/example/Project_2/repositories/UserRepository.java
new file mode 100644
--- /dev/null	(date 1741840919389)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/repositories/UserRepository.java	(date 1741840919389)
@@ -0,0 +1,12 @@
+package com.example.Project_2.repository;
+
+import com.example.Project_2.models.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import java.util.Optional;
+
+public interface UserRepository extends JpaRepository<User, Long> {
+    //Interfaces for database operations
+    //Examples
+    Optional<User> findByUsername(String username);
+    Optional<User> findByEmail(String email);
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java b/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java
new file mode 100644
--- /dev/null	(date 1741840919385)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/controller/UserController.java	(date 1741840919385)
@@ -0,0 +1,55 @@
+package com.example.Project_2.controller;
+
+import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
+import org.springframework.web.bind.annotation.*;
+import com.example.Project_2.models.User;
+import com.example.Project_2.service.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.List;
+
+@RestController
+@RequestMapping("/user")
+public class UserController {
+
+    @Autowired
+    private UserService userService;
+
+    // OAuth2 authentication user info
+    @GetMapping("/auth")
+    public Map<String, Object> getUser(OAuth2AuthenticationToken authentication) {
+        // Check if authentication is null (User is logged out)
+        if (authentication == null) {
+            return Map.of("error", "User not authenticated");
+        }
+
+        // Get attributes safely
+        Map<String, Object> attributes = authentication.getPrincipal().getAttributes();
+        Map<String, Object> userAttributes = new HashMap<>(attributes);
+
+        // Simulate new user status (Modify as needed)
+        String email = (String) userAttributes.get("email");
+        boolean isNewUser = email.equals("alberto67497@gmail.com"); // Change this for testing
+
+        userAttributes.put("isNewUser", isNewUser);
+        return userAttributes;
+    }
+
+    // Get all users
+    @GetMapping("/all")
+    public List<User> getAllUsers() {
+        System.out.println("Get users");
+        return userService.getAllUsers();
+    }
+
+    // Create a new user
+    @PostMapping("/create")
+    public User createUser(@RequestBody User user) {
+        System.out.println("new user");
+        return userService.saveUser(user);
+    }
+}
Index: Project_2/backend/src/main/java/com/example/Project_2/service/TierListService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/backend/src/main/java/com/example/Project_2/service/TierListService.java b/Project_2/backend/src/main/java/com/example/Project_2/service/TierListService.java
new file mode 100644
--- /dev/null	(date 1741840919391)
+++ b/Project_2/backend/src/main/java/com/example/Project_2/service/TierListService.java	(date 1741840919391)
@@ -0,0 +1,32 @@
+package com.example.Project_2.service;
+
+import com.example.Project_2.models.TierList;
+import com.example.Project_2.repository.TierListRepository;
+import org.springframework.stereotype.Service;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class TierListService {
+    private final TierListRepository tierListRepository;
+
+    public TierListService(TierListRepository tierListRepository) {
+        this.tierListRepository = tierListRepository;
+    }
+
+    public List<TierList> getTierListsByUserId(Long userId) {
+        return tierListRepository.findByUserId(userId);
+    }
+
+    public Optional<TierList> getTierListById(Long id) {
+        return tierListRepository.findById(id);
+    }
+
+    public TierList createTierList(TierList tierList) {
+        return tierListRepository.save(tierList);
+    }
+
+    public void deleteTierList(Long id) {
+        tierListRepository.deleteById(id);
+    }
+}
Index: Project_2/frontend/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_2/frontend/package-lock.json b/Project_2/frontend/package-lock.json
--- a/Project_2/frontend/package-lock.json	(revision bedb3e6bdb12e24f78e2a640a50f3a9fac155a59)
+++ b/Project_2/frontend/package-lock.json	(date 1741840919399)
@@ -13,6 +13,8 @@
         "@testing-library/react": "^16.2.0",
         "@testing-library/user-event": "^13.5.0",
         "react": "^19.0.0",
+        "react-dnd": "^16.0.1",
+        "react-dnd-html5-backend": "^16.0.1",
         "react-dom": "^19.0.0",
         "react-router-dom": "^7.2.0",
         "react-scripts": "5.0.1",
@@ -20,6 +22,7 @@
       },
       "devDependencies": {
         "autoprefixer": "^10.4.20",
+        "concurrently": "^9.1.2",
         "postcss": "^8.5.3",
         "tailwindcss": "^4.0.9"
       }
@@ -3109,6 +3112,24 @@
         }
       }
     },
+    "node_modules/@react-dnd/asap": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/@react-dnd/asap/-/asap-5.0.2.tgz",
+      "integrity": "sha512-WLyfoHvxhs0V9U+GTsGilGgf2QsPl6ZZ44fnv0/b8T3nQyvzxidxsg/ZltbWssbsRDlYW8UKSQMTGotuTotZ6A==",
+      "license": "MIT"
+    },
+    "node_modules/@react-dnd/invariant": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/@react-dnd/invariant/-/invariant-4.0.2.tgz",
+      "integrity": "sha512-xKCTqAK/FFauOM9Ta2pswIyT3D8AQlfrYdOi/toTPEhqCuAs1v5tcJ3Y08Izh1cJ5Jchwy9SeAXmMg6zrKs2iw==",
+      "license": "MIT"
+    },
+    "node_modules/@react-dnd/shallowequal": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/@react-dnd/shallowequal/-/shallowequal-4.0.2.tgz",
+      "integrity": "sha512-/RVXdLvJxLg4QKvMoM5WlwNR9ViO9z8B/qPcc+C0Sa/teJY7QG7kJ441DwzOjMYEY7GmU4dj5EcGHIkKZiQZCA==",
+      "license": "MIT"
+    },
     "node_modules/@rollup/plugin-babel": {
       "version": "5.3.1",
       "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
@@ -5639,14 +5660,18 @@
       }
     },
     "node_modules/cliui": {
-      "version": "7.0.4",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
-      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
+      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.0",
+        "strip-ansi": "^6.0.1",
         "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
       }
     },
     "node_modules/co": {
@@ -5867,6 +5892,48 @@
       "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
       "license": "MIT"
     },
+    "node_modules/concurrently": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-9.1.2.tgz",
+      "integrity": "sha512-H9MWcoPsYddwbOGM6difjVwVZHl63nwMEwDJG/L7VGtuaJhb12h2caPG2tVPWs7emuYix252iGfqOyrz1GczTQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.1.2",
+        "lodash": "^4.17.21",
+        "rxjs": "^7.8.1",
+        "shell-quote": "^1.8.1",
+        "supports-color": "^8.1.1",
+        "tree-kill": "^1.2.2",
+        "yargs": "^17.7.2"
+      },
+      "bin": {
+        "conc": "dist/bin/concurrently.js",
+        "concurrently": "dist/bin/concurrently.js"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/open-cli-tools/concurrently?sponsor=1"
+      }
+    },
+    "node_modules/concurrently/node_modules/supports-color": {
+      "version": "8.1.1",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
+      }
+    },
     "node_modules/confusing-browser-globals": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/confusing-browser-globals/-/confusing-browser-globals-1.0.11.tgz",
@@ -6666,6 +6733,17 @@
       "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
       "license": "MIT"
     },
+    "node_modules/dnd-core": {
+      "version": "16.0.1",
+      "resolved": "https://registry.npmjs.org/dnd-core/-/dnd-core-16.0.1.tgz",
+      "integrity": "sha512-HK294sl7tbw6F6IeuK16YSBUoorvHpY8RHO+9yFfaJyCDVb6n7PRcezrOEOa2SBCqiYpemh5Jx20ZcjKdFAVng==",
+      "license": "MIT",
+      "dependencies": {
+        "@react-dnd/asap": "^5.0.1",
+        "@react-dnd/invariant": "^4.0.1",
+        "redux": "^4.2.0"
+      }
+    },
     "node_modules/dns-packet": {
       "version": "5.6.1",
       "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.6.1.tgz",
@@ -6855,9 +6933,9 @@
       }
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.105",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.105.tgz",
-      "integrity": "sha512-ccp7LocdXx3yBhwiG0qTQ7XFrK48Ua2pxIxBdJO8cbddp/MvbBtPFzvnTchtyHQTsgqqczO8cdmAIbpMa0u2+g==",
+      "version": "1.5.108",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.108.tgz",
+      "integrity": "sha512-tiGxpQmvXBEzrfU5ertmbCV/nG5yqCkC1G4T1SIKP335Y5rjXzPWmijR6XcoGXZvVoo4dknfdNe4Tl7lcIROLg==",
       "license": "ISC"
     },
     "node_modules/emittery": {
@@ -8876,6 +8954,21 @@
         "he": "bin/he"
       }
     },
+    "node_modules/hoist-non-react-statics": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
+      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "react-is": "^16.7.0"
+      }
+    },
+    "node_modules/hoist-non-react-statics/node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
+      "license": "MIT"
+    },
     "node_modules/hoopy": {
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/hoopy/-/hoopy-0.1.4.tgz",
@@ -10069,6 +10162,44 @@
         }
       }
     },
+    "node_modules/jest-cli/node_modules/cliui": {
+      "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^7.0.0"
+      }
+    },
+    "node_modules/jest-cli/node_modules/yargs": {
+      "version": "16.2.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
+      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
+      "license": "MIT",
+      "dependencies": {
+        "cliui": "^7.0.2",
+        "escalade": "^3.1.1",
+        "get-caller-file": "^2.0.5",
+        "require-directory": "^2.1.1",
+        "string-width": "^4.2.0",
+        "y18n": "^5.0.5",
+        "yargs-parser": "^20.2.2"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/jest-cli/node_modules/yargs-parser": {
+      "version": "20.2.9",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
+      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/jest-config": {
       "version": "27.5.1",
       "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-27.5.1.tgz",
@@ -13924,6 +14055,45 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/react-dnd": {
+      "version": "16.0.1",
+      "resolved": "https://registry.npmjs.org/react-dnd/-/react-dnd-16.0.1.tgz",
+      "integrity": "sha512-QeoM/i73HHu2XF9aKksIUuamHPDvRglEwdHL4jsp784BgUuWcg6mzfxT0QDdQz8Wj0qyRKx2eMg8iZtWvU4E2Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@react-dnd/invariant": "^4.0.1",
+        "@react-dnd/shallowequal": "^4.0.1",
+        "dnd-core": "^16.0.1",
+        "fast-deep-equal": "^3.1.3",
+        "hoist-non-react-statics": "^3.3.2"
+      },
+      "peerDependencies": {
+        "@types/hoist-non-react-statics": ">= 3.3.1",
+        "@types/node": ">= 12",
+        "@types/react": ">= 16",
+        "react": ">= 16.14"
+      },
+      "peerDependenciesMeta": {
+        "@types/hoist-non-react-statics": {
+          "optional": true
+        },
+        "@types/node": {
+          "optional": true
+        },
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-dnd-html5-backend": {
+      "version": "16.0.1",
+      "resolved": "https://registry.npmjs.org/react-dnd-html5-backend/-/react-dnd-html5-backend-16.0.1.tgz",
+      "integrity": "sha512-Wu3dw5aDJmOGw8WjH1I1/yTH+vlXEL4vmjk5p+MHxP8HuHJS1lAGeIdG/hze1AvNeXWo/JgULV87LyQOr+r5jw==",
+      "license": "MIT",
+      "dependencies": {
+        "dnd-core": "^16.0.1"
+      }
+    },
     "node_modules/react-dom": {
       "version": "19.0.0",
       "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.0.0.tgz",
@@ -14179,6 +14349,15 @@
         "node": ">=8"
       }
     },
+    "node_modules/redux": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/redux/-/redux-4.2.1.tgz",
+      "integrity": "sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.9.2"
+      }
+    },
     "node_modules/reflect.getprototypeof": {
       "version": "1.0.10",
       "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
@@ -14581,6 +14760,16 @@
         "queue-microtask": "^1.2.2"
       }
     },
+    "node_modules/rxjs": {
+      "version": "7.8.2",
+      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
+      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "tslib": "^2.1.0"
+      }
+    },
     "node_modules/safe-array-concat": {
       "version": "1.1.3",
       "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
@@ -16076,9 +16265,9 @@
       }
     },
     "node_modules/terser-webpack-plugin": {
-      "version": "5.3.11",
-      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.11.tgz",
-      "integrity": "sha512-RVCsMfuD0+cTt3EwX8hSl2Ks56EbFHWmhluwcqoPKtBnfjiT6olaq7PRIRfhyU8nnC2MrnDrBLfrD/RGE+cVXQ==",
+      "version": "5.3.12",
+      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.12.tgz",
+      "integrity": "sha512-jDLYqo7oF8tJIttjXO6jBY5Hk8p3A8W4ttih7cCEq64fQFWmgJ4VqAQjKr7WwIDlmXKEc6QeoRb5ecjZ+2afcg==",
       "license": "MIT",
       "dependencies": {
         "@jridgewell/trace-mapping": "^0.3.25",
@@ -16231,6 +16420,16 @@
         "node": ">=8"
       }
     },
+    "node_modules/tree-kill": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
+      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "tree-kill": "cli.js"
+      }
+    },
     "node_modules/tryer": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/tryer/-/tryer-1.0.1.tgz",
@@ -16569,9 +16768,9 @@
       }
     },
     "node_modules/update-browserslist-db": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.2.tgz",
-      "integrity": "sha512-PPypAm5qvlD7XMZC3BujecnaOxwhrtoFR+Dqkk5Aa/6DssiH0ibKoketaj9w8LP7Bont1rYeoV5plxD7RTEPRg==",
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
       "funding": [
         {
           "type": "opencollective",
@@ -17589,30 +17788,32 @@
       }
     },
     "node_modules/yargs": {
-      "version": "16.2.0",
-      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
-      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
+      "version": "17.7.2",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
+      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "cliui": "^7.0.2",
+        "cliui": "^8.0.1",
         "escalade": "^3.1.1",
         "get-caller-file": "^2.0.5",
         "require-directory": "^2.1.1",
-        "string-width": "^4.2.0",
+        "string-width": "^4.2.3",
         "y18n": "^5.0.5",
-        "yargs-parser": "^20.2.2"
+        "yargs-parser": "^21.1.1"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">=12"
       }
     },
     "node_modules/yargs-parser": {
-      "version": "20.2.9",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
-      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
+      "version": "21.1.1",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
+      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
+      "dev": true,
       "license": "ISC",
       "engines": {
-        "node": ">=10"
+        "node": ">=12"
       }
     },
     "node_modules/yocto-queue": {
